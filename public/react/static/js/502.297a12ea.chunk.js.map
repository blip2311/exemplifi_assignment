{"version":3,"file":"static/js/502.297a12ea.chunk.js","mappings":"iMAKA,MAyIA,EAzIoBA,IAAa,IAAZ,GAAEC,GAAID,EAEzB,MAAOE,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,KAEnCO,EAAAA,EAAAA,YAAU,KACYC,WAClB,IACE,MAAMC,QAAoBC,EAAAA,EAAAA,GAAc,wBACxC,IAAID,IAAeA,EAAYE,IAY7B,MAAM,IAAIC,MAAM,mBAZkB,CAClC,MAAMD,EAAMF,EAAYE,IAAIE,QAAQ,SAAUhB,GAExCiB,QAAiBC,MAAMJ,EAAK,CAAEK,OAAQP,EAAYQ,QAAQ,KAChE,IAAKH,EAASI,GAEZ,MAAM,IAAIN,MAAM,+BAElB,MAAMO,QAAiBL,EAASM,OAChChB,EAAYe,EAASE,KACvB,CAIF,CAAE,MAAOC,GACPC,QAAQD,MAAM,4BAA6BA,EAC7C,GAEFE,EAAa,GACZ,CAAC3B,KAEJU,EAAAA,EAAAA,YAAU,KACWC,WACjBF,QAAemB,EAAAA,EAAAA,KAAW,EAE5BC,EAAY,GACX,IA+CH,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,QAAMG,UAAU,eAAeC,SA9CdvB,UAInB,GAHAwB,EAAEC,iBAGEnC,GAAQG,EAAS,CACnB,MAAMiC,EAAc,CAAEC,YAAarC,EAAMsC,QAASnC,GAClD,IAAIoC,EAAa,CAAEvC,OAAMG,WAEzB,IACE,MAAMQ,QAAoBC,EAAAA,EAAAA,GAAc,wBACxC,IAAKD,IAAgBA,EAAYE,IAC/B,MAAM,IAAIC,MAAM,mBAElB,MAAMD,EAAMF,EAAYE,IAAIE,QAAQ,SAAUhB,GACxCiB,QAAiBC,MAAMJ,EAAK,CAChCK,OAAQP,EAAYQ,QAAQ,GAC5BqB,QAAS,CACP,eAAgB,mBAChBC,OAAQ,mBACR,eAAgBlC,GAGlBmC,KAAMC,KAAKC,UAAUR,KAEvB,IAAKpB,EAASI,GACZ,MAAM,IAAIN,MAAM,wBAElByB,QAAmBvB,EAASM,MAC9B,CAAE,MAAOE,GACPC,QAAQD,MAAM,yBAA0BA,EAC1C,CAGAC,QAAQoB,IAAIN,GAGZjC,EAAY,IAAID,EAAUkC,IAG1BtC,EAAQ,IACRG,EAAW,GACb,GAKwD2B,SAAA,EACpDe,EAAAA,EAAAA,KAAA,OAAKd,UAAU,uBAAsBD,UACnCe,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLf,UAAU,eACVjC,GAAG,OACH,mBAAiB,YACjBiD,MAAOhD,EACPiD,SAAWf,GAAMjC,EAAQiC,EAAEgB,OAAOF,OAClCG,YAAY,YAIhBL,EAAAA,EAAAA,KAAA,OAAKd,UAAU,uBAAsBD,UACnCe,EAAAA,EAAAA,KAAA,YACEd,UAAU,eACVhC,KAAK,eACLD,GAAG,YACHoD,YAAY,uBACZC,KAAK,IACLJ,MAAO7C,EACP8C,SAAWf,GAAM9B,EAAW8B,EAAEgB,OAAOF,YAIzCF,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASf,UAAU,mCAAkCD,SAAC,eAIrEe,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MAAAf,SAAI,cACJe,EAAAA,EAAAA,KAAA,MAAId,UAAU,oBAAmBD,SAC9B1B,EAASgD,KAAI,CAACC,EAAaC,KAC1B1B,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEe,EAAAA,EAAAA,KAAA,QAAAf,SAAOuB,EAAYjB,cAAmB,IAAEiB,EAAYhB,UAD7CiB,SAaZ,ECxDP,EA1EoBC,KAClB,MAAM,GAAEzD,IAAO0D,EAAAA,EAAAA,MAGRC,EAAaC,IAAkBzD,EAAAA,EAAAA,UAAS,CAC7C0D,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRC,YAAa,KA2Bf,OAxBAtD,EAAAA,EAAAA,YAAU,KACiBC,WACvB,KACEE,EAAAA,EAAAA,GAAc,eAAeoD,MAAKtD,UAChC,MAAMG,EAAMF,EAAYE,IAClBG,QAAiBC,MAAMJ,EAAK,CAAEK,OAAQP,EAAYQ,QAAQ,KAChE,IAAKH,EAASI,GACZ,MAAM,IAAIN,MAAM,+BAElB,MAGMmD,SAHiBjD,EAASM,QAGVC,KAAK2C,MAAMD,GAASA,EAAKlE,KAAOoE,SAASpE,KAC/D0B,QAAQoB,IAAIoB,GACZN,EAAeM,GAAQ,CAAC,EAAE,GAE9B,CAAE,MAAOzC,GACPC,QAAQD,MAAM,4BAA6BA,EAC7C,GAGF4C,EAAkB,GACjB,CAACrE,KAGF+C,EAAAA,EAAAA,KAAA,QAAMd,UAAU,kBAAiBD,UAC/Be,EAAAA,EAAAA,KAAA,OAAKd,UAAU,YAAWD,UACxBe,EAAAA,EAAAA,KAAA,OAAKd,UAAU,MAAKD,UAClBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,2BAA0BD,SAAA,EACvCe,EAAAA,EAAAA,KAAA,MAAId,UAAU,UAASD,SAAE2B,EAAYE,SAErCd,EAAAA,EAAAA,KAAA,SAAAf,UACEF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEe,EAAAA,EAAAA,KAACuB,EAAAA,IAAU,IAAG,kBAEhBvB,EAAAA,EAAAA,KAAA,MAAAf,SAAK2B,EAAYG,eAEnBhC,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEe,EAAAA,EAAAA,KAACwB,EAAAA,IAAa,IAAG,cAEnBxB,EAAAA,EAAAA,KAAA,MAAAf,UACEe,EAAAA,EAAAA,KAAA,QAAMd,UAAU,SAAQD,SAAE2B,EAAYI,oBAM9ChB,EAAAA,EAAAA,KAAA,MAAId,UAAU,OAAMD,SAAC,iBACrBe,EAAAA,EAAAA,KAAA,KAAAf,SAAI2B,EAAYK,eAEhBjB,EAAAA,EAAAA,KAAA,MAAId,UAAU,OAAMD,SAAC,iBAErBe,EAAAA,EAAAA,KAACyB,EAAW,CAACxE,GAAIA,YAIlB,C,8CC5EJ,MAAMyE,EAAaxE,IACxB,MACMyE,EADQ,KAAKC,SAASC,SACRC,MAAM,KAAK5E,MAC/B,GAAqB,IAAjByE,EAAMI,OACR,OAAOC,mBAAmBL,EAAMM,MAAMH,MAAM,KAAKI,QAAQ,EAGhDrD,EAAWjB,UACtB,IACE,MAAMC,QAAoBC,EAAAA,EAAAA,GAAc,uBACxC,IAAKD,IAAgBA,EAAYE,IAC/B,MAAM,IAAIC,MAAM,iBAMlB,WAJuBG,MAAMN,EAAYE,IAAK,CAC5CK,OAAQP,EAAYQ,QAAQ,GAC5B8D,YAAa,aAED7D,GACZ,MAAM,IAAIN,MAAM,8BAGlB,OADAW,QAAQoB,IAAI2B,EAAU,eACfA,EAAU,aACnB,CAAE,MAAOhD,GACPC,QAAQD,MAAM,cAAeA,EAC/B,E,iCC1BK,MCMMZ,EAAgBF,eDNDA,WAE1B,GADewE,aAAaC,QAAQ,YACxB,OAIZ,IACE,MAAMnE,QAAiBC,MAFR,qCAGf,IAAKD,EAASI,GACZ,MAAM,IAAIN,MAAM,8BAA8BE,EAAS8C,UAEzD,MAAMsB,QAAgBpE,EAASM,OACzB+D,EAAa,CAAC,EAEpBD,EAAQE,SAASC,IACf,MAAOvF,EAAMwF,GAAWC,OAAOC,QAAQH,GAAU,GAC7CvF,IAAMqF,EAAWrF,GAAQwF,EAAO,IAEtC/D,QAAQoB,IAAIwC,GAEZH,aAAaS,QAAQ,WAAYhD,KAAKC,UAAUyC,IAChDH,aAAaS,QAAQ,oBAAqBC,KAAKC,MAAMC,WACvD,CAAE,MAAOtE,GACPC,QAAQD,MAAM,2BAA4BA,EAC5C,GCjBMuE,GACCC,EAAShG,IAOZgG,EAAYhG,IAChB,IACE,MAAMiG,EAAUC,sBAChB,IAAKD,EACH,MAAM,IAAInF,MAAM,yCAElB,MAAMqF,EAAMjB,aAAaC,QAAQ,YACjC,IAAKgB,EAAK,OAAO,KAEjB,MACMxF,EADMgC,KAAKyD,MAAMD,GACCnG,GAExB,OADAW,EAAYE,IAAM,GAAGoF,KAAWtF,EAAYE,MACrCF,GAAe,IACxB,CAAE,MAAOa,GAEP,OADAC,QAAQD,MAAM,iCAAiCxB,MAAUwB,GAClD,IACT,E","sources":["Pages/TaskDetails/CommentForm/CommentForm.js","Pages/TaskDetails/TaskDetails.js","Utils/cookieHelper.js","Utils/loadRouteMap.js","Utils/routeHelper.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./CommentForm.scss\";\r\nimport { useEffect } from \"react\";\r\nimport { getRouteAsync } from \"../../../Utils/routeHelper\";\r\nimport { getToken } from \"../../../Utils/cookieHelper\";\r\nconst CommentForm = ({ id }) => {\r\n  // State for form inputs\r\n  const [name, setName] = useState(\"\");\r\n  const [comment, setComment] = useState(\"\");\r\n  const [comments, setComments] = useState([]); // State to store all comments\r\n  const [token, setToken] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getComments = async () => {\r\n      try {\r\n        const routeObject = await getRouteAsync(\"tasks.comments.index\");\r\n        if (routeObject && routeObject.url) {\r\n          const url = routeObject.url.replace(\"{task}\", id);\r\n          // fetch comments\r\n          const response = await fetch(url, { method: routeObject.methods[0] });\r\n          if (!response.ok) {\r\n            //Throw error when the response is not ok\r\n            throw new Error(\"Network response was not ok\");\r\n          }\r\n          const jsonData = await response.json();\r\n          setComments(jsonData.data);\r\n        } else {\r\n          //Throw error when url is returned\r\n          throw new Error(\"No Url returned\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching task data:\", error);\r\n      }\r\n    };\r\n    getComments();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    const fetchToken = async () => {\r\n      setToken(await getToken());\r\n    };\r\n    fetchToken();\r\n  }, []);\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Save comment if both name and comment are not empty\r\n    if (name && comment) {\r\n      const requestBody = { author_name: name, content: comment };\r\n      let newComment = { name, comment };\r\n\r\n      try {\r\n        const routeObject = await getRouteAsync(\"tasks.comments.store\");\r\n        if (!routeObject || !routeObject.url) {\r\n          throw new Error(\"No url returned\");\r\n        }\r\n        const url = routeObject.url.replace(\"{task}\", id);\r\n        const response = await fetch(url, {\r\n          method: routeObject.methods[0],\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n            \"X-XSRF-TOKEN\": token,\r\n          },\r\n\r\n          body: JSON.stringify(requestBody),\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error(\"Error saving comment\");\r\n        }\r\n        newComment = await response.json();\r\n      } catch (error) {\r\n        console.error(\"Error saving Comment: \", error);\r\n      }\r\n\r\n      // Log the new comment in the console\r\n      console.log(newComment);\r\n\r\n      // Add the new comment to the list\r\n      setComments([...comments, newComment]);\r\n\r\n      // Clear name and comment fields\r\n      setName(\"\");\r\n      setComment(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"comment-form\" onSubmit={handleSubmit}>\r\n        <div className=\"col-12 col-md-4 mb-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"name\"\r\n            aria-describedby=\"emailHelp\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)} // Update name state\r\n            placeholder=\"Name\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-12 col-md-4 mb-4\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            name=\"comment-text\"\r\n            id=\"text-area\"\r\n            placeholder=\"Please add a comment\"\r\n            rows=\"3\"\r\n            value={comment}\r\n            onChange={(e) => setComment(e.target.value)} // Update comment state\r\n          ></textarea>\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-secondary px-4 mt-2 mb-4\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n      <hr></hr>\r\n      {/* Display the list of comments */}\r\n      <h4>Comments</h4>\r\n      <ul className=\"comment-list mt-4\">\r\n        {comments.map((commentItem, index) => (\r\n          <li key={index}>\r\n            <span>{commentItem.author_name}</span> {commentItem.content}\r\n          </li>\r\n        ))}\r\n        {/* <li>\r\n          <span>Vivek</span> Contrary to popular belief, Lorem Ipsum is not\r\n          simply random text. It has roots in a piece of classical Latin\r\n        </li>\r\n        <li>\r\n          <span>Vivek</span> Contrary to popular belief, Lorem Ipsum is not\r\n          simply random text. It has roots in a piece of classical Latin\r\n        </li> */}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommentForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { FaRegClock, FaStarHalfAlt } from \"react-icons/fa\";\r\nimport \"./TaskDetails.scss\";\r\nimport CommentForm from \"./CommentForm/CommentForm\";\r\n// Import getRouteAsync if it's exported from a utility file\r\nimport { getRouteAsync } from \"../../Utils/routeHelper\";\r\n\r\nconst CardDetails = () => {\r\n  const { id } = useParams();\r\n\r\n  // State to hold task details\r\n  const [taskDetails, setTaskDetails] = useState({\r\n    title: \"\",\r\n    due_date: \"\",\r\n    status: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchTaskDetails = async () => {\r\n      try {\r\n        getRouteAsync(\"tasks.index\").then(async (routeObject) => {\r\n          const url = routeObject.url;\r\n          const response = await fetch(url, { method: routeObject.methods[0] });\r\n          if (!response.ok) {\r\n            throw new Error(\"Network response was not ok\");\r\n          }\r\n          const jsonData = await response.json();\r\n          // const response = await fetch(\"/Data.json\");\r\n          // const data = await response.json();\r\n          const task = jsonData.data.find((task) => task.id === parseInt(id));\r\n          console.log(task);\r\n          setTaskDetails(task || {});\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error fetching task data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTaskDetails();\r\n  }, [id]);\r\n\r\n  return (\r\n    <main className=\"content-wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12 task-details-wrap\">\r\n            <h1 className=\"heading\">{taskDetails.title}</h1>\r\n\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <th>\r\n                    <FaRegClock /> Created At\r\n                  </th>\r\n                  <td>{taskDetails.due_date}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>\r\n                    <FaStarHalfAlt /> Status\r\n                  </th>\r\n                  <td>\r\n                    <span className=\"status\">{taskDetails.status}</span>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n            <h4 className=\"mt-4\">Description</h4>\r\n            <p>{taskDetails.description}</p>\r\n\r\n            <h6 className=\"mt-4\">Add Comment</h6>\r\n\r\n            <CommentForm id={id} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default CardDetails;\r\n","import { getRouteAsync } from \"./routeHelper\";\r\n\r\nexport const getCookie = (name) => {\r\n  const value = `; ${document.cookie}`;\r\n  const parts = value.split(`; ${name}=`);\r\n  if (parts.length === 2)\r\n    return decodeURIComponent(parts.pop().split(\";\").shift());\r\n};\r\n\r\nexport const getToken = async () => {\r\n  try {\r\n    const routeObject = await getRouteAsync(\"sanctum.csrf-cookie\");\r\n    if (!routeObject || !routeObject.url) {\r\n      throw new Error(\"Url Not found\");\r\n    }\r\n    const response = await fetch(routeObject.url, {\r\n      method: routeObject.methods[0],\r\n      credentials: \"include\",\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Could not fetch CSRF token\");\r\n    }\r\n    console.log(getCookie(\"XSRF-TOKEN\"));\r\n    return getCookie(\"XSRF-TOKEN\");\r\n  } catch (error) {\r\n    console.error(\"CSRF error:\", error);\r\n  }\r\n};\r\n","export const loadRouteMap = async () => {\r\n  const cached = localStorage.getItem(\"routeMap\");\r\n  if (cached) return; // Already cached, no need to fetch again\r\n\r\n  const baseUrl = process.env.REACT_APP_API_BASE_URL || window.location.origin;\r\n  const endpoint = `${baseUrl}/api/route-map`;\r\n  try {\r\n    const response = await fetch(endpoint);\r\n    if (!response.ok)\r\n      throw new Error(`Failed to fetch route map: ${response.status}`);\r\n\r\n    const rawData = await response.json();\r\n    const normalized = {};\r\n\r\n    rawData.forEach((routeObj) => {\r\n      const [name, details] = Object.entries(routeObj)[0];\r\n      if (name) normalized[name] = details;\r\n    });\r\n    console.log(normalized);\r\n\r\n    localStorage.setItem(\"routeMap\", JSON.stringify(normalized));\r\n    localStorage.setItem(\"routeMapTimestamp\", Date.now().toString());\r\n  } catch (error) {\r\n    console.error(\"Error loading route map:\", error);\r\n  }\r\n};\r\n","import { loadRouteMap } from \"./loadRouteMap\";\r\n/**\r\n * Asynchronously ensures the routeMap is loaded, then retrieves the route.\r\n * @param {string} name - The name of the Laravel route.\r\n * @returns {Promise<{ url: string, methods: string[] } | null>}\r\n */\r\nexport const getRouteAsync = async (name) => {\r\n  await loadRouteMap();\r\n  return getRoute(name);\r\n};\r\n/**\r\n * Retrieves a named route from localStorage's routeMap.\r\n * @param {string} name - The name of the Laravel route (e.g. 'tasks.store').\r\n * @returns {{ url: string, methods: string[] } | null} - Route details or null if not found.\r\n */\r\nconst getRoute = (name) => {\r\n  try {\r\n    const baseUrl = process.env.REACT_APP_API_BASE_URL;\r\n    if (!baseUrl) {\r\n      throw new Error(\"REACT_APP_API_BASE_URL is not defined\");\r\n    }\r\n    const raw = localStorage.getItem(\"routeMap\");\r\n    if (!raw) return null;\r\n\r\n    const map = JSON.parse(raw);\r\n    const routeObject = map[name];\r\n    routeObject.url = `${baseUrl}/${routeObject.url}`;\r\n    return routeObject || null;\r\n  } catch (error) {\r\n    console.error(`Error accessing routeMap for \"${name}\":`, error);\r\n    return null;\r\n  }\r\n};\r\n"],"names":["_ref","id","name","setName","useState","comment","setComment","comments","setComments","token","setToken","useEffect","async","routeObject","getRouteAsync","url","Error","replace","response","fetch","method","methods","ok","jsonData","json","data","error","console","getComments","getToken","fetchToken","_jsxs","_Fragment","children","className","onSubmit","e","preventDefault","requestBody","author_name","content","newComment","headers","Accept","body","JSON","stringify","log","_jsx","type","value","onChange","target","placeholder","rows","map","commentItem","index","CardDetails","useParams","taskDetails","setTaskDetails","title","due_date","status","description","then","task","find","parseInt","fetchTaskDetails","FaRegClock","FaStarHalfAlt","CommentForm","getCookie","parts","document","cookie","split","length","decodeURIComponent","pop","shift","credentials","localStorage","getItem","rawData","normalized","forEach","routeObj","details","Object","entries","setItem","Date","now","toString","loadRouteMap","getRoute","baseUrl","process","raw","parse"],"sourceRoot":""}