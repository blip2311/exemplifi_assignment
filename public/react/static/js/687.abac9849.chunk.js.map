{"version":3,"file":"static/js/687.abac9849.chunk.js","mappings":"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","sources":["Pages/Home/TaskCard.js","Pages/Home/CardWrapper.js","Pages/Home/FilterForm.js","Layout/Header/HeaderWithForm.js","Pages/Home/Home.js","Utils/loadRouteMap.js","Utils/routeHelper.js"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport CardIcon from '../../Paper.png';\r\n\r\nconst CardComponent = ({ id, status, title, date }) => {\r\n  const navigate = useNavigate();\r\n\r\n  // Function to handle card click\r\n  const handleCardClick = () => {\r\n    navigate(`/card-details/${id}`); // Navigate to the card details page with the id\r\n  };\r\n\r\n  return (\r\n    <div className=\"card p-24\" id={`card-${id}`} onClick={handleCardClick}>\r\n      <span className=\"status-heading\">{status}</span>\r\n      <h5 className=\"heading-title\">\r\n        <img src={CardIcon} alt=\"Card Icon\" /> {title}\r\n      </h5>\r\n      <span className=\"date-data\">{date}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CardComponent from \"./TaskCard\";\r\nimport { getRouteAsync } from \"../../Utils/routeHelper\";\r\n\r\nexport const CardWrapper = ({ taskData }) => {\r\n  // const [taskData, setTaskData] = useState(tasks);\r\n  // const [error, setError] = useState(null);\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       getRouteAsync(\"tasks.index\").then(async (routeObject) => {\r\n  //         const url = routeObject.url;\r\n  //         const response = await fetch(url, { method: routeObject.methods[0] });\r\n  //         if (!response.ok) {\r\n  //           throw new Error(\"Network response was not ok\");\r\n  //         }\r\n  //         const jsonData = await response.json();\r\n  //         setTaskData(jsonData.data);\r\n  //       });\r\n  //       // loadRouteMap().then(async () => {\r\n  //       //   // Get the route using the routeHelper\r\n  //       //   const routeObject = getRoute();\r\n  //       //   const baseUrl = process.env.REACT_APP_API_BASE_URL;\r\n  //       //   if (!baseUrl) {\r\n  //       //     throw new Error(\"REACT_APP_API_BASE_URL is not defined\");\r\n  //       //   }\r\n  //       //   // Construct the full URL\r\n  //       //   const url = `${baseUrl}/${routeObject.url}`;\r\n  //       //   const response = await fetch(url, { method: routeObject.methods[0] });\r\n  //       //   if (!response.ok) {\r\n  //       //     throw new Error(\"Network response was not ok\");\r\n  //       //   }\r\n  //       //   const jsonData = await response.json();\r\n  //       //   setTaskData(jsonData.data);\r\n  //       // });\r\n  //     } catch (err) {\r\n  //       setError(err);\r\n  //     }\r\n  //   };\r\n  //   fetchData();\r\n  // }, []);\r\n\r\n  // if (error) {\r\n  //   return <div>Error: {error.message}</div>;\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-12 card-wrapper\">\r\n        {taskData.map((card) => (\r\n          <CardComponent\r\n            key={card.id}\r\n            id={card.id}\r\n            status={card.status}\r\n            title={card.title}\r\n            date={card.due_date}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardWrapper;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport const FilterForm = ({ taskData, getTasks }) => {\r\n  // State for the selected date and status\r\n  const [selectedDate, setSelectedDate] = useState(\"\");\r\n  const [selectedStatus, setSelectedStatus] = useState(\"\");\r\n\r\n  // State to store fetched data\r\n  // const [taskData, setTaskData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch data from Data.json on component mount\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    try {\r\n      getTasks(selectedStatus, selectedDate);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [selectedDate, selectedStatus]);\r\n\r\n  // Get unique dates and statuses from taskData\r\n  const uniqueDates = [...new Set(taskData.map((card) => card.due_date))];\r\n  const uniqueStatuses = [...new Set(taskData.map((card) => card.status))];\r\n\r\n  // Handlers for select changes\r\n  const handleDateChange = (e) => {\r\n    setSelectedDate(e.target.value);\r\n  };\r\n\r\n  const handleStatusChange = (e) => {\r\n    setSelectedStatus(e.target.value);\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  return (\r\n    <form className=\"filter-form\">\r\n      <h6>Filter By</h6>\r\n\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"filter-with-date\" className=\"select-label\">\r\n          Due Date\r\n        </label>\r\n        <select\r\n          className=\"form-select\"\r\n          aria-label=\"date select\"\r\n          id=\"filter-with-date\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n        >\r\n          <option value=\"\" disabled>\r\n            Select Date\r\n          </option>\r\n          {uniqueDates.map((date, index) => (\r\n            <option key={index} value={date}>\r\n              {date}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"filter-with-status\" className=\"select-label\">\r\n          Status\r\n        </label>\r\n        <select\r\n          className=\"form-select\"\r\n          aria-label=\"status select\"\r\n          id=\"filter-with-status\"\r\n          value={selectedStatus}\r\n          onChange={handleStatusChange}\r\n        >\r\n          <option value=\"\" disabled>\r\n            Select Status\r\n          </option>\r\n          {uniqueStatuses.map((status, index) => (\r\n            <option key={index} value={status}>\r\n              {status}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FilterForm;\r\n","import React from \"react\";\r\nimport { CiCirclePlus } from \"react-icons/ci\";\r\nimport ListIcon from \"../../Filter.png\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./Header.scss\";\r\nimport FilterForm from \"../../Pages/Home/FilterForm\";\r\nexport const HeaderFilterForm = ({ taskData, getTasks }) => {\r\n  return (\r\n    <>\r\n      <div className=\"row top-header\">\r\n        <div className=\"col-12 col-md-2\">\r\n          <button className=\"btn-list btn\">\r\n            <img src={ListIcon} alt=\"List Icon\" /> List\r\n          </button>\r\n        </div>\r\n        <div className=\"col-12 col-md-10\">\r\n          <div className=\"row \">\r\n            <div className=\"col-12 col-md-8 col-lg-9 order-2 order-md-1\">\r\n              <FilterForm taskData={taskData} getTasks={getTasks} />\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-3 d-flex justify-content-md-end order-1 order-md-2 my-4 my-md-0\">\r\n              <NavLink\r\n                to=\"/create-task\"\r\n                className=\"btn-create-task d-inline-flex\"\r\n              >\r\n                Create Task <CiCirclePlus />\r\n              </NavLink>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default HeaderFilterForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Home.scss\";\r\nimport CardWrapper from \"./CardWrapper\";\r\nimport HeaderFilterForm from \"../../Layout/Header/HeaderWithForm\";\r\nimport { getRouteAsync } from \"../../Utils/routeHelper\";\r\nexport const Home = () => {\r\n  const [tasks, setTask] = useState([]);\r\n  useEffect(() => {\r\n    getTasks();\r\n  }, []);\r\n  const getTasks = async (status, due_date) => {\r\n    try {\r\n      const routeObject = await getRouteAsync(\"tasks.index\");\r\n      if (!routeObject || !routeObject.url) {\r\n        throw new Error(\"Route could not be found\");\r\n      }\r\n      const parameterPresent = status || due_date ? \"?\" : \"\";\r\n      const statusParameter = status ? `status=${status}` : \"\";\r\n      const dueDateParameter = due_date\r\n        ? `due_date_from=${due_date}&due_date_to=${due_date}`\r\n        : \"\";\r\n      const andParameter = status && due_date ? \"&\" : \"\";\r\n      console.log(\r\n        `status: ${statusParameter}, due_date: ${dueDateParameter}, `\r\n      );\r\n      const url = `${routeObject.url}${parameterPresent}${statusParameter}${andParameter}${dueDateParameter}`;\r\n      const response = await fetch(url, {\r\n        method: routeObject.methods[0],\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(\"Cannot fetch tasks\");\r\n      }\r\n      const jsonObject = await response.json();\r\n      setTask(jsonObject.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks: \", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main className=\"content-wrapper\">\r\n      <div className=\"container\">\r\n        <HeaderFilterForm taskData={tasks} getTasks={getTasks} />\r\n        <CardWrapper taskData={tasks} />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\nexport default Home;\r\n","export const loadRouteMap = async () => {\r\n  const cached = localStorage.getItem(\"routeMap\");\r\n  if (cached) return; // Already cached, no need to fetch again\r\n\r\n  const baseUrl = process.env.REACT_APP_API_BASE_URL || window.location.origin;\r\n  const endpoint = `${baseUrl}/api/route-map`;\r\n  try {\r\n    const response = await fetch(endpoint);\r\n    if (!response.ok)\r\n      throw new Error(`Failed to fetch route map: ${response.status}`);\r\n\r\n    const rawData = await response.json();\r\n    const normalized = {};\r\n\r\n    rawData.forEach((routeObj) => {\r\n      const [name, details] = Object.entries(routeObj)[0];\r\n      if (name) normalized[name] = details;\r\n    });\r\n    console.log(normalized);\r\n\r\n    localStorage.setItem(\"routeMap\", JSON.stringify(normalized));\r\n    localStorage.setItem(\"routeMapTimestamp\", Date.now().toString());\r\n  } catch (error) {\r\n    console.error(\"Error loading route map:\", error);\r\n  }\r\n};\r\n","import { loadRouteMap } from \"./loadRouteMap\";\r\n/**\r\n * Asynchronously ensures the routeMap is loaded, then retrieves the route.\r\n * @param {string} name - The name of the Laravel route.\r\n * @returns {Promise<{ url: string, methods: string[] } | null>}\r\n */\r\nexport const getRouteAsync = async (name) => {\r\n  await loadRouteMap();\r\n  return getRoute(name);\r\n};\r\n/**\r\n * Retrieves a named route from localStorage's routeMap.\r\n * @param {string} name - The name of the Laravel route (e.g. 'tasks.store').\r\n * @returns {{ url: string, methods: string[] } | null} - Route details or null if not found.\r\n */\r\nconst getRoute = (name) => {\r\n  try {\r\n    const baseUrl = process.env.REACT_APP_API_BASE_URL;\r\n    if (!baseUrl) {\r\n      throw new Error(\"REACT_APP_API_BASE_URL is not defined\");\r\n    }\r\n    const raw = localStorage.getItem(\"routeMap\");\r\n    if (!raw) return null;\r\n\r\n    const map = JSON.parse(raw);\r\n    const routeObject = map[name];\r\n    routeObject.url = `${baseUrl}/${routeObject.url}`;\r\n    return routeObject || null;\r\n  } catch (error) {\r\n    console.error(`Error accessing routeMap for \"${name}\":`, error);\r\n    return null;\r\n  }\r\n};\r\n"],"names":["_ref","id","status","title","date","navigate","useNavigate","_jsxs","className","onClick","handleCardClick","children","_jsx","src","alt","taskData","_Fragment","map","card","CardComponent","due_date","getTasks","selectedDate","setSelectedDate","useState","selectedStatus","setSelectedStatus","loading","setLoading","error","setError","useEffect","message","uniqueDates","Set","uniqueStatuses","htmlFor","value","onChange","e","target","disabled","index","ListIcon","FilterForm","NavLink","to","CiCirclePlus","Home","tasks","setTask","async","routeObject","getRouteAsync","url","Error","parameterPresent","statusParameter","dueDateParameter","andParameter","console","log","response","fetch","method","methods","ok","jsonObject","json","data","HeaderFilterForm","CardWrapper","localStorage","getItem","rawData","normalized","forEach","routeObj","name","details","Object","entries","setItem","JSON","stringify","Date","now","toString","loadRouteMap","getRoute","baseUrl","process","raw","parse"],"sourceRoot":""}